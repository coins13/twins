#!/usr/bin/env python3
# coding: utf-8
import os
import sys
from getpass import getpass
import coins.twins as twins
import coins.kdb as kdb
from coins.twins import Twins
from coins.ssh import search_for_ssh_server

def get_username ():
    try:
        username = open(os.path.expanduser("~/.twins-username")).read()
    except IOError:
        username = input("enter username (sXXXXXXX): ")
        with open(os.path.expanduser("~/.twins-username"), "w") as f: f.write(username)
    return username


def get_passwd (username):
    """ OS X のキーリングがよくわからないので、ホームディレクトリに0600なファイルを作る。"""
    try:
        passwd = open(os.path.expanduser("~/.twins-passwd")).read()
    except IOError:
        passwd = getpass("enter passwd: ")
        # XXX
        open(os.path.expanduser("~/.twins-passwd"), "w").close()
        os.chmod(os.path.expanduser("~/.twins-passwd"), 0o600)
        with open(os.path.expanduser("~/.twins-passwd"), "w") as f:
            f.write(passwd)
    return passwd

def delete_account_info (s):
    try:
        username = open(os.path.expanduser("~/.twins-username")).read()
        os.remove(os.path.expanduser("~/.twins-username"))
        os.remove(os.path.expanduser("~/.twins-passwd"))
    except:
        pass

    sys.exit("ログインエラー: " + s)

def login_twins ():
    try:
        return Twins(get_username(), get_passwd(get_username()))
    except twins.AuthError as e:
       delete_account_info(str(e))


HELP = """\
使い方: univ コマンド

コマンドたち:
  ach                  - 成績開示
  achsum               - 累計成績要約 (履修単位数, 修得単位数, GPA)
  reg     科目番号     - 履修登録
  unreg   科目番号     - 履修登録の取り消し
  info    科目番号     - 科目情報の表示
  search  文字列       - 授業探し
  reged                - 履修登録済み授業を表示
  timetable モジュール - 時間割をhtml形式で出力
  scp foo bar ...      - scp -r ... *.coins.tsukuba.ac.jp:Desktop
  ssh                  - COINSの適当なiMacにSSH接続\

オプションたち:
  -t   - 人間に優しい表示 [reged,search]
"""

def main ():
    try:
        command = sys.argv[1]
    except IndexError:
        sys.exit(HELP)

    # XXX: もっときちんとしたコマンド名が欲しい
    if command == "ach":
        t = login_twins()
        print("評価\t単位数\t科目名")
        for a in t.get_achievements():
            print("%s\t%s\t%s" % (a["総合評価"], a["単位数"], a["科目名"]))

    elif command == "achsum":
        t = login_twins()
        for k,v in t.get_achievements_summary().items():
            if k == "GPA":
                print("%s:\t\t%s" % (k, v))
            else:
                print("%s:\t%s" % (k, v))

    elif command == "timetable":
        try:
            module = sys.argv[2]
        except IndexError:
            sys.exit(HELP)

        t = login_twins()

        try:
            print(t.get_timetable_html(module))
        except twins.RequestError:
            sys.exit("なにか起きた")

    elif command == "reg":
        try:
            course_id = sys.argv[2]
        except IndexError:
            sys.exit(HELP)

        t = login_twins()

        try:
            t.register_course(course_id)
        except twins.RequestError:
            sys.exit("履修エラー: 不正、重複またはまだ履修できない科目番号です (%s)" % course_id)

    elif command == "unreg":
        try:
            course_id = sys.argv[2]
        except IndexError:
            sys.exit(HELP)

        t = login_twins()

        try:
            t.unregister_course(course_id)
        except twins.RequestError:
            sys.exit("履修取り消しエラー: '%s'" % course_id)

    elif command == "reged":
        try:
            if sys.argv[2] == "-t":
                with_table = True
        except IndexError:
            with_table = False

        t = login_twins()

        if with_table:
            from prettytable import PrettyTable
            x = PrettyTable(["科目番号", "単位", "学期", "曜日", "教室", "科目名"])
            x.padding_width = 1
            for c in t.get_registered_courses():
                if c is None: continue
                x.add_row([c["id"], c["credit"], c["modules"], c["periods"], c["room"], c["title"]])
            print(x)
        else:
            for c in t.get_registered_courses():
                if c is None: continue
                print("%s\t\t%s\t%s\t%s\t%s\t\t%s" % (c["id"], c["credit"], c["modules"], c["periods"], c["room"], c["title"]))


    elif command == "info":
        try:
            course_id = sys.argv[2]
        except IndexError:
            sys.exit(HELP)

        try:
            c = kdb.get_course_info(course_id)
        except kdb.DownloadError:
            sys.exit("failed to download Kdb database")

        print("科目名:   %s"  % c["title"])
        print("科目番号: %s"  % c["id"])
        print("単位:     %s"  % c["credit"])
        print("学期:     %s"  % c["modules"])
        print("教室:     %s"  % c["room"])
        print("時限:     %s"  % c["periods"])
        print("概要:\n%s"     % c["desc"])
        print("注意事項:\n%s" % c["notes"])

    elif command == "search":
        with_table = False
        try:
            if sys.argv[2] == "-t":
                with_table = True
                query = sys.argv[3]
            else:
                query = sys.argv[2]
        except IndexError:
            sys.exit(HELP)

        try:
            k = kdb.Kdb()
        except kdb.DownloadError:
            sys.exit("failed to download Kdb database")

        if with_table:
            from prettytable import PrettyTable
            x = PrettyTable(["科目番号", "単位", "学期", "曜日", "教室", "科目名"])
            x.padding_width = 1
            for c in k.search(query):
                if c is None: continue
                x.add_row([c["id"], c["credit"], c["modules"], c["periods"], c["room"], c["title"]])
            print(x)
        else:
            print("%s\t%s\t%s\t%s\t\t%s" % ("科目番号", "単位", "学期", "曜日", "科目名"))
            for c in k.search(query):
                if c is None: continue
                print("%s\t\t%s\t%s\t%s\t\t%s" % (c["id"], c["credit"], c["modules"], c["periods"], c["title"]))

    elif command == "scp":
        try:
            files = sys.argv[2:]
        except IndexError:
            sys.exit(HELP)

        if files == []:
            sys.exit(HELP)

        host = search_for_ssh_server()
        if host == "":
            sys.exit("univ: Failed to connect. Try again.")
        user = get_username()
        os.system("scp -r %s %s@%s:Desktop" % (" ".join(files), user, host))

    elif command == "ssh":
        host = search_for_ssh_server()
        if host == "":
            sys.exit("univ: Failed to connect. Try again.")
        user = get_username()
        os.system("ssh -l %s %s" % (user, host))

    elif command == "次モジュールから本気出す":
        # イースターエッグ: 落単リスト。リフレッシュマンなんていないので考慮してない。
        t = login_twins()
        print("単位数\t科目名")
        i=0
        for a in t.get_achievements():
            if a["総合評価"] != "D": continue
            i += float(a["単位数"])
            print("%s\t%s" % (a["単位数"], a["科目名"]))
        if i > 15: print("がんばろう")

    elif command == "help":
        sys.exit(HELP)

    else:
        sys.exit(HELP)

if __name__== "__main__":
    try:
        main()
    except KeyboardInterrupt:
        sys.exit("aborted.")
